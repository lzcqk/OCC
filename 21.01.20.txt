#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include<fstream>
#include"EVA.h"
#include"defin.h"
#include"Msrcr.h"

using namespace std;
using namespace cv;                  //flag形参用于将来跟踪下一个帧

///////////////////////////////////////////stack.mp4 && bubvideo.mp4
int channel = 2;                          //测试的通道
int channel_data[] = { 1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0 };
//Bchannel_data = {1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0}
//Gchannel_data = {1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,1}
//Rchannel_data = {1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,1}


/////////////////////////////////////////////////new.mp4
//Gray_data = { 1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0}


		/////////////////////用sort函数改进
void debubble(Mat BGRchannel)               //个人认为时间复杂度过高  建议改进
{
	int* vec;
	vec = new int[1080];
	//Mat transp(Size(1080, 960), CV_16UC1);
	for (int coun = 0; coun < BGRchannel.rows; coun++)
	{
		uchar* data = BGRchannel.ptr<uchar>(coun);
		for (int i = BGRchannel.cols - 1; i > 0; i--)
		{
			vec[i] = int(data[i]);
		}
		for (int ai = 0; ai < BGRchannel.cols - 1; ai++)
		{
			for (int aj = 0; aj < BGRchannel.cols - 1 - ai; aj++)
			{
				if (vec[aj] > vec[aj + 1])
				{
					int tmp;
					tmp = vec[aj];
					vec[aj] = vec[aj + 1];
					vec[aj + 1] = tmp;
				}
			}
		}
		for (int i = BGRchannel.cols - 1; i > 0; i--)
		{
			data[i] = vec[i];
		}
	}
	cout << BGRchannel.rows << "      " << BGRchannel.cols << "    " << endl;
	delete vec;
}

void vote_data()
{
	const int box_size = 200;
	int vote_box[box_size];
	for (int i = 0; i < box_size; i++)vote_box[i] = 0;
	for (int in_time = 0; in_time < 10; in_time++)
	{
		if (inter_fix[in_time].size() < box_size)
		{
			vote_box[inter_fix[in_time].size()]++;
		}
	}
	int maxlen = 0;               //长度
	int maxseq = vote_box[0];           //频率
	for (int i = 1; i < box_size; i++)
	{
		if (maxseq < vote_box[i])
		{
			maxlen = i;
			maxseq = vote_box[i];
		}
	}
	cout << "最大频率为" << maxseq << endl;
	cout << "最大长度为" << maxlen << endl;
	int* sto_use_D;
	sto_use_D = new int[maxseq];
	int ptr = 0;
	for (int in_t = 0; in_t < 10; in_t++)         //将相同长度的解码的index记录下来
	{
		if (inter_fix[in_t].size() == maxlen)            //保存index
		{
			sto_use_D[ptr] = in_t;
			ptr++;
		}
	}
	D_with_header.clear();
	int zero_or_one[2];                //保存0，1的次数
	for (int i = 0; i < maxlen; i++)         //开始各个位置的连接计数
	{
		zero_or_one[0] = 0;
		zero_or_one[1] = 0;
		for (int j = 0; j < maxseq; j++)
		{
			int dat = inter_fix[sto_use_D[j]][i];
			zero_or_one[dat]++;
		}
		if (zero_or_one[0] > zero_or_one[1]) D_with_header.push_back(0);
		else if (zero_or_one[0] < zero_or_one[1]) D_with_header.push_back(1);
		else D_with_header.push_back(2);
	}
}

void eyes_compare()
{
	cout << "我的数据：" << endl;
	for (int i = 0; i < D_with_header.size(); i++)
	{
		cout << D_with_header[i];
	}
	cout << endl;
	cout << "真的数据：" << endl;
	for (int i = 0; i < sizeof(channel_data) / sizeof(int); i++)
	{
		cout << channel_data[i];
	}
	cout << endl;
}

void count_error_rate(int First_header)
{
	/////////////////先计算0，1的长度，减少不必要的计算
	int real_data_len = sizeof(channel_data) / sizeof(int);
	vector<int> R_len_01_num[2];            //real_data
	vector<int> M_len_01_num[2];            //my_data
	int num0 = 0;
	int num1 = 0;
	for (int i = 0; i < real_data_len; i++)           //将数据的data转换为len —— num的组合
	{
		if (channel_data[i] == 0 && num1 == 0)
		{
			num0++;
		}
		else if (channel_data[i] == 0 && num1 != 0)
		{
			num0++;
			R_len_01_num[0].push_back(num1);
			R_len_01_num[1].push_back(1);
			num1 = 0;
		}
		else if (channel_data[i] == 1 && num0 == 0)
		{
			num1++;
		}
		else if (channel_data[i] == 1 && num0 != 0)
		{
			num1++;
			R_len_01_num[0].push_back(num0);
			R_len_01_num[1].push_back(0);
			num0 = 0;
		}
	}
	if (num0 != 0)
	{
		R_len_01_num[0].push_back(num0);
		R_len_01_num[1].push_back(0);
	}
	else
	{
		R_len_01_num[0].push_back(num1);
		R_len_01_num[1].push_back(1);
	}
	////////////////////////////////////////////计算my_decode的len和num   求BER
	num0 = 0;
	num1 = 0;
	///////////////////////////////////////求my_decode前半部分的len和num 
	for (int ptr = 0; ptr <= First_header - 1; ptr++)  //ptr 指向的是my_decode的index
	{
		if (my_decode[ptr] == 0 && num1 == 0)
		{
			num0++;
		}
		else if (my_decode[ptr] == 0 && num1 != 0)
		{
			num0++;
			M_len_01_num[0].push_back(num1);
			M_len_01_num[1].push_back(1);
			num1 = 0;
		}
		else if (my_decode[ptr] == 1 && num0 == 0)
		{
			num1++;
		}
		else if (my_decode[ptr] == 1 && num0 != 0)
		{
			num1++;
			M_len_01_num[0].push_back(num0);
			M_len_01_num[1].push_back(0);
			num0 = 0;
		}
	}
	if (num0 != 0)
	{
		M_len_01_num[0].push_back(num0);
		M_len_01_num[1].push_back(0);
	}
	else
	{
		M_len_01_num[0].push_back(num1);
		M_len_01_num[1].push_back(1);
	}
	int Rlen = R_len_01_num[0].size();
	int Mlen = M_len_01_num[0].size();
	int error = 0;
	//////////////////////////////////////////开始比较
	int Rnum = 0;                                       //用于给真实值设置偏移量
	for (int i = 1; i <= Mlen; i++)
	{
		int powe = 1;
		while (powe * Rlen - i - Rnum < 0)  powe++;
		if (M_len_01_num[1][Mlen - i] == R_len_01_num[1][powe * Rlen - i - Rnum])
		{
			int left_abs = abs(M_len_01_num[0][Mlen - i] - R_len_01_num[0][powe * Rlen - i - Rnum]);           //相差的绝对值
			if (left_abs <= 1) error += left_abs;                                          //如果出现两个以上就视为我的算法不好，让用户手动计算
			else
			{
				int temp = powe * Rlen - i - Rnum;
				int temp1 = i + 1;                      //用于处理    00    1    0    被误认为是        0000         的情况           此处只处理两步
				int temp2 = i + 2;
				powe = 1;
				while (powe * Rlen - temp1 - Rnum < 0) powe++;
				temp1 = powe * Rlen - temp1 - Rnum;
				powe = 1;
				while (powe * Rlen - temp2 - Rnum < 0) powe++;
				temp2 = powe * Rlen - temp2 - Rnum;
				left_abs = abs(M_len_01_num[0][Mlen - i] - R_len_01_num[0][temp] - R_len_01_num[0][temp1] - R_len_01_num[0][temp2]);
				if (left_abs <= 3)
				{
					left_abs = abs(M_len_01_num[0][Mlen - i] - (R_len_01_num[0][temp] + R_len_01_num[0][temp2]));
					error = error + R_len_01_num[0][temp1] + left_abs;                                  ///////////漏掉的数
					Rnum += 2;
				}
				else
				{
					cout << "算法有问题" << endl;
				}
			}
		}
		else
		{
			cout << "请手动比较1" << endl;
			break;
		}
	}
	num0 = 0;
	num1 = 0;
	M_len_01_num[0].clear();
	M_len_01_num[1].clear();
	////////////////////////////////////求my_decode后半部分的len和num
	for (int ptr = First_header; ptr < my_decode.size(); ptr++)  //ptr 指向的是my_decode的index
	{
		if (my_decode[ptr] == 0 && num1 == 0)
		{
			num0++;
		}
		else if (my_decode[ptr] == 0 && num1 != 0)
		{
			num0++;
			M_len_01_num[0].push_back(num1);
			M_len_01_num[1].push_back(1);
			num1 = 0;
		}
		else if (my_decode[ptr] == 1 && num0 == 0)
		{
			num1++;
		}
		else if (my_decode[ptr] == 1 && num0 != 0)
		{
			num1++;
			M_len_01_num[0].push_back(num0);
			M_len_01_num[1].push_back(0);
			num0 = 0;
		}
	}
	if (num0 != 0)
	{
		M_len_01_num[0].push_back(num0);
		M_len_01_num[1].push_back(0);
	}
	else
	{
		M_len_01_num[0].push_back(num1);
		M_len_01_num[1].push_back(1);
	}
	Mlen = M_len_01_num[0].size();

	Rnum = 0;
	for (int i = 0; i < Mlen; i++)
	{
		int powe = 0;
		while (Rnum + i - powe * Rlen >= Rlen) powe++;
		if (M_len_01_num[1][i] == R_len_01_num[1][Rnum + i - powe * Rlen])
		{
			int left_abs = abs(M_len_01_num[0][i] - R_len_01_num[0][Rnum + i - powe * Rlen]);
			if (left_abs <= 1) error += left_abs;
			else
			{
				int temp = Rnum + i - powe * Rlen;
				int temp1 = i + 1;                      //用于处理    00    1    0    被误认为是        0000         的情况           此处只处理两步
				int temp2 = i + 2;
				powe = 0;
				while (Rnum + temp1 - powe * Rlen >= Rlen) powe++;
				temp1 = Rnum + temp1 - powe * Rlen;
				powe = 0;
				while (Rnum + temp2 - powe * Rlen >= Rlen) powe++;
				temp2 = Rnum + temp2 - powe * Rlen;
				left_abs = abs(M_len_01_num[0][i] - R_len_01_num[0][temp] - R_len_01_num[0][temp1] - R_len_01_num[0][temp2]);
				if (left_abs <= 3)
				{
					left_abs = abs(M_len_01_num[0][i] - (R_len_01_num[0][temp] + R_len_01_num[0][temp2]));
					error = error + R_len_01_num[0][temp1] + left_abs;                                  ///////////漏掉的数
					Rnum += 2;
				}
				else
				{
					cout << "算法有问题2" << endl;
				}
			}
		}
		else
		{
			cout << "请手动比较2" << endl;
			break;
		}
	}

	error_num += error;
	sum_num += my_decode.size();
	cout << "error_num" << error_num << endl;
	cout << "sum_num" << sum_num << endl;
}


/*
int main()                         //找数据包   10帧投票
{
	EVA my_eva;
	Mat src, oneline, split_src[3];
	Mat gama_pic;
	VideoCapture cap;
	cap.open("stack.mp4");
	//cap.open("bubvideo.mp4");
	//cap.open("new.mp4");
	for (int i = 0; i < 10; i++) cap >> src;
	for (int i = 0; i < 10; i++)
	{
		cap >> src;
		my_eva.initial_vector();
		sca = int(1080.0 / src.rows + 1);
		cout << sca << endl;
		resize(src, src, Size(1080, 960), (0, 0), (0, 0), INTER_LINEAR);                              //用linear 和 nearest 其实差别不大
		//cvtColor(src, src, COLOR_BGR2GRAY);
		//debubble(src);
		//oneline = src(Rect((src.cols - 1), 0, 1, src.rows));
		split(src, split_src);               //RGB分离
		debubble(split_src[channel]); //RGB分离
		oneline = split_src[channel](Rect((src.cols - 1), 0, 1, src.rows));//RGB分离
		oneline = oneline.t();
		my_eva.Sum_EVA(oneline);
		eyes_compare();
	}
	vote_data();
	for(int i = 0;i<5;i++) cout << endl;
	cout << "最终结果为" << endl;
	eyes_compare();
	return 0;
}

*/
/*
int main()                  //求BER
{
	EVA my_eva;
	Mat src, oneline, split_src[3];
	Mat src1, src2;
	VideoCapture cap;
	//cap.open("stack.mp4");
	cap.open("new.mp4");
	while (1)
	{
		cap >> src;
		int First_H = 0;
		if (src.empty()) break;
		my_eva.initial_vector();
		sca = int(1080.0 / src.rows + 1);
		cout << sca << endl;
		resize(src, src, Size(1080, 960), (0, 0), (0, 0), INTER_LINEAR);
		cvtColor(src, src, COLOR_BGR2GRAY);
		cv::sort(src, src, SORT_EVERY_ROW + SORT_ASCENDING);
		oneline = src(Rect((src.cols - 1), 0, 1, src.rows));
		//split(src, split_src);               //RGB分离
		//debubble(split_src[channel]); //RGB分离
		//oneline = split_src[channel](Rect((src.cols - 1), 0, 1, src.rows));
		oneline = oneline.t();
		First_H = my_eva.Sum_EVA(oneline,0);
		eyes_compare();
		count_error_rate(First_H);
	}
	cout << "BER为" << error_num/sum_num<<endl;
	return 0;
}
*/

//size核大小,越大平滑效果越明显
//sigma越大平滑效果越明显


Mat GetGaussianKernel(const int size, const double sigma)      //size 必须为奇数
{
	double** gaus = new double* [size];
	for (int i = 0; i < size; i++)
	{
		gaus[i] = new double[size];  //动态生成矩阵
	}
	Mat Kernel(size, size, CV_64FC1, Scalar(0));
	const double PI = 4.0 * atan(1.0); //圆周率π赋值
	int center = size / 2;
	double sum = 0;
	for (int i = 0; i < size; i++)
	{
		for (int j = 0; j < size; j++)
		{
			gaus[i][j] = (1 / (2 * PI * sigma * sigma)) * exp(-((i - center) * (i - center) + (j - center) * (j - center)) / (2 * sigma * sigma));//二维高斯函数
			sum += gaus[i][j];
		}
	}
	for (int i = 0; i < size; i++)       //归一化
	{
		for (int j = 0; j < size; j++)
		{
			gaus[i][j] /= sum;
			cout << gaus[i][j] << ",  ";
			Kernel.at<double>(i, j) = gaus[i][j];//将数组转换为Mat
		}
		cout << endl << endl;
	}
	return Kernel;
}

Mat Convlution(Mat input_img, Mat Kernel)
{
	Mat OutputImage = Mat::zeros(input_img.size(), input_img.type());
	Kernel = Kernel.t();
	int border_y = Kernel.rows / 2;
	int border_x = Kernel.cols / 2;          //求出锚点
	for (int img_y = border_y; img_y <= input_img.rows - 2 * border_y; img_y++)
	{
		for (int img_x = border_x; img_x <= input_img.cols - 2 * border_x; img_x++)
		{
			int end_value = 0;
			for (int kernel_y = -border_y; kernel_y <= border_y; kernel_y++)
			{
				for (int kernel_x = -border_x; kernel_x <= border_x; kernel_x++)
				{
					int img_value = input_img.at<uchar>(img_y + kernel_y, img_x + kernel_x);
					double Kernel_value = Kernel.at<double>(kernel_y + border_y, kernel_x + border_x);
					end_value += img_value * Kernel_value;
				}
			}
			if (end_value > 255)
				end_value = 255;
			else if (end_value < 0)
				end_value = 0;
			OutputImage.at<uchar>(img_y, img_x) = end_value;
		}
	}
	return OutputImage;
}

Mat MSR(Mat src, int my_Size)                     //内核的size
{
	double power[3] = { 1 / 3,1 / 3,1 / 3 };
	double sigma[3] = { 15,80,200 };
	double K[3] = { 0,0,0 };
	float c = 90;                   //固定值
	Mat split_src[3];
	Mat src_2, temp_src;
	vector<Mat> src_1;
	src.convertTo(src_2, CV_64FC3, 1.0,1.0);
	split(src_2, split_src);
	for (int channels = 0; channel < 3; channel++)
	{
		//for (int i = 0; i < 3; i++)    MSR多尺度  如果不用就是单尺度
		//{
		Mat Log_src = Mat::zeros(src_2.size(), CV_64FC3);
		Mat Log_S_G = Mat::zeros(src_2.size(), CV_64FC1);
		Mat Sum_src = Mat::zeros(src_2.size(), CV_64FC1);
		Mat kernel = GetGaussianKernel(my_Size, c / sqrt(2));
		temp_src = Convlution(split_src[channels], kernel);
		cv::log(split_src[channels], Log_src);
		cv::log(temp_src, Log_S_G);
		Sum_src = Log_src - Log_S_G;
		double sum_get = 0;
		for (int x = 0; x < Sum_src.cols; x++)
		{
			for (int y = 0; y < Sum_src.rows; y++)
			{
				sum_get += Sum_src.at<uchar>(y, x);
			}
		}
		cout << "和为" << sum_get << endl;
		src_1.push_back(Sum_src);
		//}
	}
	return src;
}

/*int main()
{
	Mat src;
	VideoCapture cap;
	cap.open("new.mp4");
	cap >> src;
	if (src.empty())
	{
		std::cout << "The image is empty" << std::endl;

		return 1;
	}

	cv::Mat res1, res2, res3;
	int k = 3;

	std::vector < double > w(k);
	w[0] = 0.333333333;
	w[1] = 0.333333333;
	w[2] = 0.333333334;

	std::vector<double> s(k);
	s[0] = 15;
	s[1] = 80;
	s[2] = 200;

	//my_crc.SingleScaleRetinex(src, res1,k_code_size, 300,c);

//	my_crc.MultiScaleRetinex(src, res2, k, w, s);

	MultiScaleRetinexCR(src, res3, k, w, s, 1, 1, 1, 0);

	cv::imshow("org", src);
	//cv::imshow("res1", res1);
//	cv::imshow("res2", res2);
	cv::imshow("res3", res3);
	cv::moveWindow("res3", 100, 100);
	cv::waitKey(0);

	return 0;
}

*/

int main()
{
	Mat src = imread("fix.jpg");
	Mat out_imag = MSR(src, 3);
}